course_title: Intro to SQL for Data Science
course_description: Course description here.
programming_language: r
chapters:
  - chapter_title: Selecting and summarizing columns
    chapter_description: This is a template chapter.
    exercises:
      - type: VideoExercise
        title: Introduction
        content: >-
          * Motivating example (case study preview)

          * Why not just use R/Python/etc?
            * Memory
            * Speed
            * Centralization
            * Access control
            * DMBS tools
            * ...?
          * Database vocabulary (in context of example; make spreadsheet
          analogies)
            * Database (~ spreadsheet)
            * Tables (~ worksheet)
            * Columns & records (a.k.a. records) (~ columns & rows)
            * Fields (~ cells)
          * Basic SQL syntax
            * Not case-sensitive
            * End statement with semicolon
            * Stylistic conventions (?)
          * SELECT

          * DISTINCT
      - type: MultipleChoiceExercise
        title: Why use relational databases?
        content: >-
          Q: Which of the following is NOT a good reason to use relational
          databases?

          A: They are good at handling unstructured data
      - type: NormalExercise
        title: Simple SELECT statements
        content: >-
          Single column, multiple columns, all columns (*). Order matters!
          Finish with embedded MCE asking for specific value from last query
      - type: NormalExercise
        title: Combine SELECT with DISTINCT
        content: >-
          Select all distinct values of column_name with SELECT DISTINCT. Repeat
          with multiple columns. Follow with embedded MCE to test interpretation
      - type: MultipleChoiceExercise
        title: Select the proper SELECT
        content: >-
          (Test for style and syntax)


          Q: Which of the following is the proper way to select all distinct
          values of column_name from the table_name table?

          A: 

          SELECT DISTINCT column_name

          FROM table_name;
      - type: VideoExercise
        title: Aggregate functions
        content: |-
          * Difference between COUNT(*) and COUNT(column_name)
          * Combining COUNT with DISTINCT
          * SUM
          * AVG
          * MIN
          * MAX
      - type: NormalExercise
        title: COUNT
        content: >-
          COUNT(*) counts NULLs, COUNT(column_name) excludes NULLs,
          COUNT(DISTINCT column_name)
      - type: NormalExercise
        title: SUM and AVG
        content: Find SUM and AVG of numeric column. Embedded MCE to interpret result
      - type: NormalExercise
        title: MIN and MAX
        content: MIN and MAX of numeric column. Embedded MCE to interpret result
  - chapter_title: Filtering rows
    chapter_description: Description
    exercises:
      - type: VideoExercise
        title: Filter rows with WHERE
        content: |-
          * WHERE
          * Filtering numeric vs. text values
          * Basic comparison operators: =, <>, <, <=, >, >=
          * Multiple conditions with AND, OR
      - type: NormalExercise
        title: Filter for a single condition
        content: >-
          Practice filtering for numeric and text values. Start with = and <>,
          then move to inequalities
      - type: NormalExercise
        title: Filter for multiple conditions
        content: >-
          Same as above, but incorporate AND, OR. Recall something from chapter
          1, like DISTINCT or aggregate functions? Do at least one >= AND <= for
          comparison to BETWEEN in later exercise
      - type: VideoExercise
        title: More advanced filtering
        content: |-
          * BETWEEN (compare to >= AND <= )
          * IN (compare to = AND = )
          * IS NULL, IS NOT NULL
      - type: MultipleChoiceExercise
        title: Look familiar?
        content: >-
          Give students a SELECT statement using BETWEEN and have them select an
          equivalent statement using >= AND <=
      - type: NormalExercise
        title: Stuck somewhere IN BETWEEN
        content: Practice filtering with BETWEEN and IN
      - type: NormalExercise
        title: Manage missingness
        content: >-
          Practice with IN NULL and IS NOT NULL. Combine with COUNT, DISTINCT,
          and/or other concepts from earlier
      - type: VideoExercise
        title: Search for patterns with LIKE
        content: |-
          * LIKE
          * Wildcards: %, _, [charlist], [!charlist]
      - type: NormalExercise
        title: LIKE it or NOT
        content: >-
          Practice with some simple pattern matching using LIKE with % and _.
          Then combine with NOT.
      - type: NormalExercise
        title: Pattern matching mania
        content: >-
          Practice with LIKE some more, using more advanced wildcards: sets and
          ranges of characters. Use negation (!) as well. Finish with embedded
          MCE for interpretation
      - type: VideoExercise
        title: Simple subqueries
        content: >-
          Introduce subqueries as a convenient way to filter on values that
          aren't readily available in the table of interest. These values may be
          the result of a second filtering operation on the same table, or they
          may come from a different table entirely. Use as teaser for future
          course covering joins. We will only cover very simple examples here
      - type: NormalExercise
        title: Single table subqueries
        content: >-
          Perform a couple of subqueries using information from only one table.
          Finish with embedded MCE to drill home motivation
      - type: NormalExercise
        title: Two table subqueries
        content: >-
          Perform some two table subqueries (i.e. use values from another table
          to filter this table). Finish again with an MCE to interpret the
          results
  - chapter_title: Sorting and grouping
    chapter_description: Description
    exercises:
      - type: VideoExercise
        title: Sort with ORDER BY
        content: |-
          * ORDER BY
            * Single column
            * Multiple columns
            * DESC
      - type: NormalExercise
        title: Sort by a single column
        content: 'Use ORDER BY on one column at a time, with and without DESC'
      - type: NormalExercise
        title: Sort by multiple columns
        content: >-
          Use  ORDER BY on multiple columns. Make tiebreaker analogy. Embed MCE
          to interpret single value from last result
      - type: VideoExercise
        title: Get started with GROUP BY
        content: >-
          * GROUP BY
            * Single column
            * Multiple columns
          * Combine with ORDER BY

          * Introduce column aliases via AS as a convenient shorthand. Will
          become even more useful later in chapter
      - type: MultipleChoiceExercise
        title: Everything in its right place
        content: >-
          Q: Which of the following sorts column1 in ascending order within each
          level of column2?

          A:

          SELECT column1 AS c1, column2 AS c2

          FROM table_name

          GROUP BY c1

          ORDER BY c2;
      - type: NormalExercise
        title: Sort within groups
        content: >-
          Combine GROUP BY and ORDER BY to sort within groups. Embed another MCE
          at end to interpret last result
      - type: VideoExercise
        title: Combine GROUP BY with aggregate functions
        content: >-
          * Unleash the full power of GROUP BY and aggregate functions by
          combining them to perform operations within groups

          * Examples covering grouped COUNT, SUM, AVG
      - type: NormalExercise
        title: Compute group extremes
        content: >-
          Combine GROUP BY with MIN and MAX to compute the extreme values within
          each group for a couple of variables
      - type: NormalExercise
        title: Sort by group averages
        content: 'Compute group averages, then sort by the averages'
      - type: VideoExercise
        title: Filtering with aggregate functions
        content: >-
          * WHERE keyword cannot be used to filter results from aggregate
          functions

          * Enter HAVING

          * Walk through several examples (this is not intuitive)

          * Can't use aliases in the HAVING clause since evaluated before the
          SELECT clause

          * Brief discussion of order of operations (note to self: should this
          come sooner in the course?)
      - type: MultipleChoiceExercise
        title: Order of operations
        content: >-
          Check understanding of the order of operations, i.e. HAVING executes
          before SELECT, so alias is not helpful here
      - type: NormalExercise
        title: HAVING patience
        content: >-
          Compute group values, then filter for values above/below a certain
          threshold using HAVING
      - type: NormalExercise
        title: Combine HAVING with ORDER BY
        content: >-
          Same as above, plus sort results by same group values. Note you can
          refer to the column alias in the ORDER BY since it's executed last
  - chapter_title: 'Case study: New York City bike share'
    chapter_description: Description
    exercises:
      - type: VideoExercise
        title: Introduction to the data
        content: >-
          * Intro Citi Bike database: trips, stations, weather

          * Part of an urban planning committee trying to understand biking
          habits in NYC

          * Will be exploring a number of questions, practicing your SQL skills
          along the way

          * Quick refresher of chapter 1 concepts (SELECT, DISTINCT, aggregate
          functions)
      - type: MultipleChoiceExercise
        title: How many records?
        content: >-
          How many records are in the stations, trips, and weather tables,
          respectively? 498, 9937968, 365 (numbers may change if/when we subset
          the data to e.g. summer only)
      - type: NormalExercise
        title: Preview the tables
        content: >-
          SELECT some columns from weather, then from stations, then from
          weather. But intro LIMIT for the last, since we don't want to retrieve
          all records from such a huge table
      - type: NormalExercise
        title: Explore the data
        content: |-
          * How many bikes? SELECT COUNT(DISTINCT bike_id) FROM trips;
          * Minimum, average, and maximum trip lengths (in seconds, minutes)?
          * Minimum, average, and maximum mean_temp_f?
      - type: VideoExercise
        title: 'Refresher: filtering rows'
        content: >-
          * Quick review of chapter 2 concepts (filtering rows)

          * Pose some interested questions to be answered in the following
          exercises
      - type: NormalExercise
        title: 'When it rains, it pours'
        content: >
          * How many days saw more than 1/2 inch of precipitation?

          * How many days did it *rain* more than 1/2 inch? (Need to use LIKE to
          partial match for "Rain" on events column)

          * How many days did it rain BETWEEN 1/2 and 1 inches, with cloud cover
          greater than 6?
      - type: NormalExercise
        title: Does rain affect rides?
        content: >-
          * What's the average trip length?

          * What's the average trip length on days with more than 1/2 inch of
          rain? (use start_date)


          SELECT AVG(duration) 

          FROM trips 

          WHERE start_date IN (
            SELECT date 
            FROM weather 
            WHERE precipitation_in > 0.5
          );


          * Finish with multiple choice to interpret result
      - type: VideoExercise
        title: 'Refresher: sorting and grouping'
        content: >-
          * Refresher of chapter 3 concepts (sorting and grouping)

          * Pose some interesting questions to be answered in following
          exercises
      - type: NormalExercise
        title: Most popular routes?
        content: >-
          Count total number of trips within each combination of
          start_station_id and end_station_id, then sort in descending order
          (need to LIMIT result?)
      - type: NormalExercise
        title: Average trip duration by starting station
        content: >-
          Compute the average trip duration by starting station and order the
          result by station id: 


          SELECT start_station_id AS station, AVG(duration) AS seconds 

          FROM trips 

          GROUP BY station 

          ORDER BY station


          ---


          Again, but only the longest trips:


          SELECT start_station_id AS station, AVG(duration) AS seconds 

          FROM trips 

          GROUP BY station 

          HAVING AVG(duration) > 2000

          ORDER BY seconds DESC;


          Takes us to a station out in Bed-Stuy, Brooklyn!
      - type: VideoExercise
        title: Summary
        content: Summarize what was learned from the case study and the course overall
