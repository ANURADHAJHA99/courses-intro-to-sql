course_title: Intro to SQL for Data Science
course_description: |-
  Dataset for videos:

  trains: id, origin, destination, departed, arrived
  train_rides: train_id, passenger_id
  passengers: id, name, age, background

  Dataset for exercises:

  authors: first name, last name, background
  posts: author_id, title, published_at
  reads: user_id, post_id, duration
  users: name, age, background
programming_language: r
chapters:
  - chapter_title: Introduction
    chapter_description: >
      Get to know relational database management systems, and get to know the
      SELECT statement.
    exercises:
      - type: VideoExercise
        title: What is an RDBMS?
        content: >-
          Explain the concept of a relational database, about SQL, and about
          queries. But why use SQL in the first place, and not R/Python/other
          data analysis languages? You want the computation to be on the
          database side. When you've got the exact information you need, you can
          start your analyses in the tool of choice. Also interesting for real
          time dashboarding/visualization. Be very clear about what SQL is, and
          what it is not. We won't talk about updating SQL, we're data
          scientist, not data engineers.

          Give example database: use DESCRIBE and basic SELECT statement as a
          first reconnaissance.
      - type: NormalExercise
        title: A first date
        content: Use DESCRIBE to figure out the different tables in the database.
      - type: NormalExercise
        title: Your first SQL query
        content: |-
          Very basic:
          select a from x
      - type: VideoExercise
        title: SELECT
        content: >
          How to select a column, multiple columns, all columns, and how to use
          aliases.

          select a from x

          select a, b from x

          select * from x

          select a as new_a, b as new_b from x


          Also mention here that using SELECT or select does not matter. In
          general, SQL is not case-sensitive when it comes to keywords, but it
          does when it comes to table and column names!
      - type: NormalExercise
        title: Select all columns
        content: Use the * to select all columns at once
      - type: NormalExercise
        title: Select multiple columns
        content: >-
          Separate column names with commas to select multiple columns. The
          order matters!
      - type: NormalExercise
        title: Using aliases
        content: Use the 'as' thing to load in certain columns under certain aliases.
      - type: VideoExercise
        title: SELECT (2)
        content: >-
          COUNT, SUM, AVG, MIN, MAX, DISTINCT to get a first idea about
          aggregates of your data.
      - type: NormalExercise
        title: COUNT
        content: SELECT COUNT(*) FROM posts (to count the total number of posts)
      - type: NormalExercise
        title: SUM and AVG
        content: SELECT AVG(age) FROM readers
      - type: NormalExercise
        title: MIN and MAX
        content: >-
          SELECT MAX(published_at) FROM posts to get the most recent post that
          was launched
      - type: NormalExercise
        title: DISTINCT
        content: |-
          Number of distinct users that read something:
          SELECT COUNT(DISTINCT user_id) FROM reads
  - chapter_title: WHERE
    chapter_description: >-
      With the WHERE statement, you can become very specific about which
      observations you want to pull out of your database. SELECT provides
      specificity to the variables or columns, WHERE provides the same thing for
      the observations.
    exercises:
      - type: VideoExercise
        title: Selecting observations and combining predicates
        content: |
          =, >, <, ... - AND, OR, NOT
          Single quotes for text values, no quotes for numerics
      - type: NormalExercise
        title: Equality
        content: Content
      - type: VideoExercise
        title: Advanced predicates
        content: 'BETWEEN, LIKE, IN'
      - type: NormalExercise
        title: Title
        content: Content
      - type: VideoExercise
        title: SELECT + WHERE = MAGIC
        content: >-
          Combine the WHERE clause with SELECT to answer more advanced problems
          (count the number of observations on the train y, what's the average
          age on passengers that go to Paris).
  - chapter_title: GROUP BY / ORDER BY
    chapter_description: Description
    exercises:
      - type: VideoExercise
        title: GROUPING DATA
        content: '''single'' groups'
        course_description: ''
      - type: VideoExercise
        title: ORDER BY
        content: Content
        course_description: ''
      - type: VideoExercise
        title: Combining GROUP BY and ORDER BY
        content: Content
        course_description: ''
  - chapter_title: Speed considerations
    chapter_description: |-
      Only return parts of results.
      Tips and tricks to speed up SQL queries.
    exercises: []
